#!/usr/bin/env python

import os
import subprocess
import sys

import hgtlib


def read_commit(git_dir, commit_id):
    cmd = ["git", "cat-file", "commit", commit_id]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, cwd=git_dir)
    stdout = proc.communicate()[0]
    assert proc.wait() == 0, (proc.wait(), cmd)
    got = []
    lines = iter(stdout.split("\n"))
    for line in lines:
        line = line.rstrip("\n")
        if line == "":
            break
        got.append(line.split(" ", 1))
    return (got, "\n".join(lines))


def main(args):
    patchlist_file = hgtlib.get_patchlist_file()
    fh = open(patchlist_file, "r")
    fh.seek(-1, 2)
    assert fh.read(1) == "\n"
    fh.close()

    subprocess.check_call(["git", "commit"] + args)

    proc = subprocess.Popen(["git", "rev-parse", "HEAD"],
                            stdout=subprocess.PIPE)
    stdout = proc.communicate()[0]
    assert proc.wait() == 0
    commit_id = stdout.rstrip("\n")
    assert len(commit_id) == 40, commit_id

    fields, msg = read_commit(".", commit_id)
    if "\n" in msg:
        msg = msg.split("\n", 1)[0]

    fh = open(patchlist_file, "a")
    fh.write("Patch %s %s\n" % (commit_id, msg))
    fh.close()


if __name__ == "__main__":
    main(sys.argv[1:])
